/* Generated By:JJTree&JavaCC: Do not edit this line. Grammar2TokenManager.java */
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

/** Token Manager. */
public class Grammar2TokenManager implements Grammar2Constants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2000L) != 0L)
            return 4;
         if ((active0 & 0x150148003800000L) != 0L)
            return 21;
         if ((active0 & 0x8000000000000L) != 0L)
            return 17;
         if ((active0 & 0x2800000000000L) != 0L)
            return 7;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x400000000000L);
      case 37:
         return jjStopAtPos(0, 33);
      case 40:
         return jjStopAtPos(0, 27);
      case 41:
         return jjStopAtPos(0, 28);
      case 42:
         return jjStopAtPos(0, 31);
      case 43:
         return jjStopAtPos(0, 30);
      case 44:
         return jjStopAtPos(0, 29);
      case 45:
         return jjStartNfaWithStates_0(0, 13, 4);
      case 47:
         return jjStopAtPos(0, 32);
      case 58:
         return jjStopAtPos(0, 20);
      case 59:
         return jjStopAtPos(0, 41);
      case 60:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_0(0x2000000000000L);
      case 61:
         return jjMoveStringLiteralDfa1_0(0x200000000000L);
      case 62:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_0(0x4000000000000L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x1000004000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x150148003800000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x10004000000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x408000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x6000000000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x80000010000L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L);
      case 91:
         return jjStopAtPos(0, 18);
      case 93:
         return jjStopAtPos(0, 19);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x400220000L);
      case 84:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         break;
      case 85:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8080000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xa0000000400000L);
      case 105:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x15014c001800000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x10002000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(2, 46);
         break;
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 78:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(2, 34);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L);
      case 110:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x501cc003800000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 114:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(2, 51);
         break;
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000400000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 76:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(3, 15);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 77:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x40001000000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000200000L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000010000L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x6000000L);
      case 104:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(3, 53);
         break;
      case 111:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(3, 57);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000400000L);
      case 114:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(3, 40);
         break;
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(4, 16);
         return jjMoveStringLiteralDfa5_0(active0, 0x24000L);
      case 81:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L);
      case 84:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(4, 21);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x10100000000000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000004000000L);
      case 105:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(4, 39);
         break;
      case 110:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(4, 38);
         break;
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000800000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 116:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(4, 55);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 82:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(5, 14);
         break;
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000800000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 114:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(5, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0xc0000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(6, 17);
         break;
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x1800000L);
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(6, 43);
         break;
      case 104:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(6, 54);
         break;
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
      case 114:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(6, 42);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 81:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L);
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(7, 22);
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L);
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(7, 25);
         break;
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(8, 26);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(9, 44);
         break;
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(10, 23);
         break;
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(11, 24);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 33;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  else if (curChar == 32)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddStates(4, 9);
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if (curChar == 35)
                     jjCheckNAddTwoStates(24, 26);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(13, 14);
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 45)
                     jjCheckNAdd(4);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 4)
                        kind = 4;
                     jjCheckNAdd(1);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAdd(2);
                  }
                  break;
               case 0:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (curChar != 48)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(2);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar == 46)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(6);
                  break;
               case 7:
                  if (curChar != 45)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(8);
                  break;
               case 8:
                  if (curChar != 32)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(8);
                  break;
               case 9:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 12:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 13:
                  if ((0x3ff100300000000L & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 14:
                  if (curChar == 34 && kind > 10)
                     kind = 10;
                  break;
               case 23:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(24, 26);
                  break;
               case 24:
                  if ((0x3ff000300000000L & l) != 0L)
                     jjCheckNAddTwoStates(24, 26);
                  break;
               case 25:
                  if (curChar == 10)
                     kind = 12;
                  break;
               case 26:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 0);
                  break;
               case 29:
                  if (curChar != 32)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(4, 9);
                  break;
               case 30:
                  if (curChar != 32)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(30);
                  break;
               case 31:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(31, 9);
                  break;
               case 32:
                  if (curChar == 32)
                     jjCheckNAddStates(10, 12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAdd(11);
                  }
                  else if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if (curChar == 86)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 10:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(11);
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjAddStates(13, 14);
                  break;
               case 15:
                  if (curChar == 73 && kind > 11)
                     kind = 11;
                  break;
               case 16:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 86)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 88 && kind > 11)
                     kind = 11;
                  break;
               case 20:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjAddStates(15, 16);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 33 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   28, 0, 4, 5, 30, 31, 9, 32, 23, 26, 32, 23, 26, 13, 14, 24, 
   26, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
"\55", "\105\116\124\111\105\122", "\122\105\105\114", "\124\105\130\124\105", 
"\102\117\117\114\105\105\116", "\133", "\135", "\72", "\103\117\116\123\124", 
"\122\145\164\157\165\162\156\145", "\106\151\156\106\157\156\143\164\151\157\156", 
"\106\151\156\120\162\157\143\145\144\165\162\145", "\106\157\156\143\164\151\157\156", "\120\162\157\143\145\144\165\162\145", 
"\50", "\51", "\54", "\53", "\52", "\57", "\45", "\116\117\116", "\117\125", 
"\105\124", "\123\151", "\123\151\156\157\156", "\106\151\156\123\151", 
"\120\157\165\162", "\73", "\106\151\156\120\157\165\162", "\124\141\156\164\121\165\145", 
"\106\151\156\124\141\156\164\121\165\145", "\75\75", "\41\75\75", "\74", "\76", "\74\75", "\76\75", "\126\141\162", 
"\106\151\156\126\141\162", "\115\145\164\150", "\106\151\156\115\145\164\150", "\104\145\142\165\164", 
"\106\151\156", "\101\154\147\157", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x3fffffffffffff1L, 
};
static final long[] jjtoSkip = {
   0x2L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[33];
static private final int[] jjstateSet = new int[66];
static protected char curChar;
/** Constructor. */
public Grammar2TokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public Grammar2TokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 33; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String tokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   tokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, tokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  //int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 9 && (0x200L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
