PARSER_BEGIN(Grammar)

/**
 * An Arithmetic Grammar.
 */
public class Grammar {

  /** Main entry point. */
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    Grammar t = new Grammar(System.in);
    try {
      SimpleNode n = t.Start();
      n.dump("");
    } catch (Exception e) {
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(Grammar)

SKIP : {
"\t"
|"\r"
}

SimpleNode Start() : {}
{
  DECL_FONC() ";"
  { return jjtThis; }
}

void CR():
{}
{
    [ [ ESPACE() ] "#" TEXTE_2() ] "\n" [ CR() ]
}

void TEXTE():
{}
{
    "\"" TEXTE_2() "\""
}

void TEXTE_2():
{}
{
    [ (MAJUSCULE() | MINSUCULE() | CHIFFRE() | CHAR_SPEC() )  TEXTE_2() ]
}

void REEL():
{}
{
    ["-"] NOMBRE() "." NOMBRE()
}

void ENTIER():
{}
{
    ["-"] NOMBRE()
}

void NOMBRE():
{}
{
    CHIFFRE() [ NOMBRE() ]
}

void NOMBRE_NN():
{}
{
    CHIFFRE_NN() [ NOMBRE() ] | "0" NOMBRE_NN()
}


void CHAR_SPEC():
{}
{
    "," | "é" | "è" | "à" | "ù" | "ç"| ";" | "." | "!" | "/" | "\\" | ":" | "?"| "%" | "^" |
    "$" | "*" | "@" | "_" | "-" | "(" | ")" | "#" | "+" | "=" | "{" | "}" | "~" | "&" | "°" |
    "<" | ">" | "'" | ESPACE()
}

void TYPE_VAR():
{}
{
    "entier" | "reel" | "texte" | "booleen"
}

void BOOLEEN():
{}
{
    "Vrai" | "Faux"
}

void CHIFFRE():
{}
{
    "0" | CHIFFRE_NN()
}

void CHIFFRE_NN():
{}
{
    "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
}

void MAJUSCULE():
{}
{
    "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"
}

void MINSUCULE():
{}
{
    "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
}

void ESPACE():
{}
{
    " " [ ESPACE() ]
}


void TABLEAU():
{}
{
   [ "[" NOMBRE_NN() "]" ]
}


void NOM_VAR_2():
{}
{
    [ (MAJUSCULE() | MINSUCULE() | CHIFFRE() | "_") NOM_VAR_2() ]
}

void NOM():
{}
{
    MINSUCULE() NOM_VAR_2()
}

void NOM_VAR():
{}
{
    NOM() TABLEAU()
}

void DECL_VAR():
{}
{
    NOM_VAR() ":" TYPE_VAR()
}


void CONTENU_VAR():
{}
{
    TEXTE() | EXP_ARITH() | CONDITION() | NOM_VAR()
}


void PARAM_VAL():
{}
{
   CONTENU_VAR() [ "," PARAM_VAL() ]
}

void APPEL_METH():
{}
{
   NOM() "(" [PARAM_VAL() ] ")"
}

void EXP_ARITH_REEL():
{}
{
   ( REEL() | APPEL_METH() ) [ OPERATEUR_ARITH() EXP_ARITH_REEL() ]
}

void EXP_ARITH_ENTIER():
{}
{
   ( ENTIER() | APPEL_METH() ) [ OPERATEUR_ARITH() EXP_ARITH_ENTIER() ]
}


void OPERATEUR_ARITH():
{}
{
    "+" | "*" | "-" | "/"
}


void EXP_ARITH():
{}
{
   EXP_ARITH_ENTIER() | EXP_ARITH_REEL()
}

void CONDITION():
{}
{
   ( BOOLEEN() | NOM_VAR() | EXP_COMP() ) EXP_BOOL()
}

void EXP_BOOL():
{}
{
   [ OPERATEUR_LOGIQUE() CONDITION() ]
}


void OPERATEUR_LOGIQUE():
{}
{
    "et" | "ou" | "non"
}

void OPERATEUR_COMPARAISON():
{}
{
   OPERATEUR_EGAL() | OPERATEUR_RELATIF()
}



void OPERATEUR_EGAL():
{}
{
    "=" | "!="
}


void OPERATEUR_RELATIF():
{}
{
     "<" | ">" | "<=" | ">="
}


void EXP_COMP():
{}
{
  EXP_COMP_ENTIER() | EXP_COMP_REEL() | EXP_COMP_TXT()
}

void EXP_COMP_ENTIER():
{}
{
   EXP_ARITH_ENTIER() OPERATEUR_COMPARAISON() EXP_ARITH_ENTIER()
}

void EXP_COMP_REEL():
{}
{
   EXP_ARITH_REEL() OPERATEUR_COMPARAISON() EXP_ARITH_REEL()
}

void EXP_COMP_TXT():
{}
{
   ( TEXTE() | APPEL_METH() ) OPERATEUR_EGAL() ( TEXTE() | APPEL_METH() )
}


void DECL_FONC(): 
{}
{
    "Fonction" ESPACE() DECL_METH()
}

void DECL_PROC(): 
{}
{
    "Procedure" ESPACE() DECL_METH()
}

void DECL_METH(): 
{}
{
    TYPE_VAR() ESPACE() NOM() "(" [PARAM()] ")"
}

void PARAM(): 
{}
{
    MINSUCULE() NOM_VAR_2() ":" TYPE_VAR() ["," ESPACE() PARAM()]
}