PARSER_BEGIN(Grammar)

/**
 * An Arithmetic Grammar.
 */
public class Grammar {

  /** Main entry point. */
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    Grammar t = new Grammar(System.in);
    try {
      SimpleNode n = t.Start();
      n.dump("");
    } catch (Exception e) {
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(Grammar)

SKIP : {
"\t"
|"\r"
}

TOKEN : {
    <NOMBRE_NN: (["0"-"9"]){1,127}(["1"-"9"])>
    | <ZERO : ("0")+>
    | <REEL : ("-")?(["0"-"9"]){1,63}(".")(["0"-"9"]){1,63}>
    | <ENTIER : ("-")? <NOMBRE_NN> | 
                ("-")? <ZERO>>
    | <ESPACE : (" ")+>
    | <MAJUSCULE : (["A"-"Z"])>
    | <MINUSCULE : (["a"-"z"])>
    | <NOM : <MINUSCULE> (<MAJUSCULE> | <MINUSCULE> | <ZERO> | <NOMBRE_NN> | "_"){1,64}>
    | <TEXTE : ("\"") (<MAJUSCULE>|<MINUSCULE>|<ZERO>|<NOMBRE_NN>|<ESPACE>)* ("\"")>
    | <CR : ((<ESPACE>("#")(<MAJUSCULE>|<MINUSCULE>|<ZERO>|<NOMBRE_NN>)*)?("\n"))+>
}

SimpleNode Start() : {}
{
  CONTENU_VAR() ";"
  { return jjtThis; }
}

void TYPE_VAR():
{}
{
    "ENTIER" | "REEL" | "TEXTE" | "BOOLEEN"
}

void BOOLEEN():
{}
{
    "VRAI" | "FAUX"
}

void TABLEAU():
{}
{
   [ "[" <NOMBRE_NN> "]" ]
}

void NOM_VAR():
{}
{
    <NOM> TABLEAU()
}

void DECL_VAR():
{}
{
    NOM_VAR() ":" TYPE_VAR()
}

void CONTENU_VAR():
{}
{
    <TEXTE> | EXP_ARITH()
}

void PARAM_VAL():
{}
{
   CONTENU_VAR() [ "," PARAM_VAL() ]
}

void APPEL_METH():
{}
{
   <NOM> "(" [PARAM_VAL() ] ")"
}

void EXP_ARITH():
{}
{
   ( <REEL> | <ENTIER> | APPEL_METH() ) [ OPERATEUR_ARITH() EXP_ARITH() ]
}


void OPERATEUR_ARITH():
{}
{
    "+" | "*" | "-" | "/"
}

void CONDITION():
{}
{
   ( BOOLEEN() | NOM_VAR() | EXP_COMP() ) [ OPERATEUR_LOGIQUE() CONDITION() ]
}


void OPERATEUR_LOGIQUE():
{}
{
    "ET" | "OU" | "NON"
}

void OPERATEUR_COMPARAISON():
{}
{
   "=" | "!=" | OPERATEUR_RELATIF()
}



void OPERATEUR_EGAL():
{}
{
    "==" | "!=="
}


void OPERATEUR_RELATIF():
{}
{
     "<" | ">" | "<=" | ">="
}


void EXP_COMP():
{}
{
  EXP_COMP_VALEUR() | EXP_COMP_TXT()
}

void EXP_COMP_VALEUR():
{}
{
   EXP_ARITH() OPERATEUR_COMPARAISON() EXP_ARITH()
}

void EXP_COMP_TXT():
{}
{
   ( <TEXTE> | APPEL_METH() ) OPERATEUR_EGAL() ( <TEXTE> | APPEL_METH() )
}


void DECL_FONC(): 
{}
{
    "Fonction" <ESPACE> DECL_METH()
}

void DECL_PROC(): 
{}
{
    "Procedure" <ESPACE> DECL_METH()
}

void DECL_METH(): 
{}
{
    TYPE_VAR() <ESPACE> <NOM> "(" [PARAM()] ")"
}

void PARAM(): 
{}
{
    <NOM> ":" TYPE_VAR() ["," <ESPACE> PARAM()]
}