/* Generated By:JJTree&JavaCC: Do not edit this line. Grammar2.java */
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
/**
 * An Arithmetic Grammar2.
 */
public class Grammar2/*@bgen(jjtree)*/implements Grammar2TreeConstants, Grammar2Constants {/*@bgen(jjtree)*/
  protected static JJTGrammar2State jjtree = new JJTGrammar2State();
  /** Main entry point. */
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    //Grammar2 t = new Grammar2(System.in);
    Grammar2 t = null;
    try {
      t = new Grammar2(new FileInputStream(new File("NOMBREMYSTERE.txt")));
    } catch (FileNotFoundException e) {
      e.printStackTrace();
    }
    try {
      SimpleNode n = t.Start();
      n.dump("");
    } catch (Exception e) {
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }

// Main
  static final public SimpleNode Start() throws ParseException {
                      /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ALGORITHME();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

// Valeurs primitives
  static final public void ENTIER() throws ParseException {
                 /*@bgen(jjtree) ENTIER */
  SimpleNode jjtn000 = new SimpleNode(JJTENTIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOMBRE_NN:
      case 13:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 13:
          jj_consume_token(13);
          break;
        default:
          jj_la1[0] = jj_gen;
          ;
        }
        jj_consume_token(NOMBRE_NN);
        break;
      case ZERO:
        jj_consume_token(ZERO);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// DÃ©claration variables
  static final public void CORPS_VAR() throws ParseException {
 /*@bgen(jjtree) CORPS_VAR */
  SimpleNode jjtn000 = new SimpleNode(JJTCORPS_VAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CR:
        jj_consume_token(CR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOM:
        case CR:
        case 21:
          CORPS_VAR();
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        break;
      case NOM:
      case 21:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOM:
          DECL_VAR();
          break;
        case 21:
          DECL_CONST();
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(CR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOM:
        case CR:
        case 21:
          CORPS_VAR();
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void TYPE_VAR() throws ParseException {
 /*@bgen(jjtree) TYPE_VAR */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE_VAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 14:
        jj_consume_token(14);
        break;
      case 15:
        jj_consume_token(15);
        break;
      case 16:
        jj_consume_token(16);
        break;
      case 17:
        jj_consume_token(17);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void TABLEAU() throws ParseException {
                 /*@bgen(jjtree) TABLEAU */
  SimpleNode jjtn000 = new SimpleNode(JJTTABLEAU);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(18);
      jj_consume_token(NOMBRE_NN);
      jj_consume_token(19);
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void NOM_VAR() throws ParseException {
 /*@bgen(jjtree) NOM_VAR */
  SimpleNode jjtn000 = new SimpleNode(JJTNOM_VAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NOM);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 18:
        TABLEAU();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void DECL_VAR() throws ParseException {
 /*@bgen(jjtree) DECL_VAR */
  SimpleNode jjtn000 = new SimpleNode(JJTDECL_VAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      NOM_VAR();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ESPACE:
        jj_consume_token(ESPACE);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(20);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ESPACE:
        jj_consume_token(ESPACE);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      TYPE_VAR();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void DECL_CONST() throws ParseException {
 /*@bgen(jjtree) DECL_CONST */
  SimpleNode jjtn000 = new SimpleNode(JJTDECL_CONST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(21);
      jj_consume_token(ESPACE);
      DECL_VAR();
      jj_consume_token(ASSIGNATION);
      CONTENU_VAR();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void CONTENU_VAR() throws ParseException {
                      /*@bgen(jjtree) CONTENU_VAR */
  SimpleNode jjtn000 = new SimpleNode(JJTCONTENU_VAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ESPACE:
        jj_consume_token(ESPACE);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      if (jj_2_1(999999999)) {
        CALCUL_BOOLEEN();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOMBRE_NN:
        case ZERO:
        case REEL:
        case NOM:
        case 13:
        case 27:
          CALCUL();
          break;
        case TEXTE:
          jj_consume_token(TEXTE);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void INST_VAR() throws ParseException {
 /*@bgen(jjtree) INST_VAR */
  SimpleNode jjtn000 = new SimpleNode(JJTINST_VAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      NOM_VAR();
      jj_consume_token(ASSIGNATION);
      CONTENU_VAR();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

// MÃ©thodes
  static final public void CORPS_METH() throws ParseException {
 /*@bgen(jjtree) CORPS_METH */
  SimpleNode jjtn000 = new SimpleNode(JJTCORPS_METH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CR:
        jj_consume_token(CR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CR:
        case 25:
        case 26:
          CORPS_METH();
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
        break;
      case 25:
      case 26:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 25:
          DECL_FONC();
          jj_consume_token(CR);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NOM:
          case CR:
          case 37:
          case 40:
          case 43:
            CODE();
            break;
          default:
            jj_la1[13] = jj_gen;
            ;
          }
          jj_consume_token(22);
          jj_consume_token(ESPACE);
          CONTENU_VAR();
          label_1:
          while (true) {
            jj_consume_token(CR);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CR:
              ;
              break;
            default:
              jj_la1[14] = jj_gen;
              break label_1;
            }
          }
          jj_consume_token(23);
          break;
        case 26:
          DECL_PROC();
          jj_consume_token(CR);
          CODE();
          jj_consume_token(24);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(CR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CR:
        case 25:
        case 26:
          CORPS_METH();
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void DECL_FONC() throws ParseException {
 /*@bgen(jjtree) DECL_FONC */
  SimpleNode jjtn000 = new SimpleNode(JJTDECL_FONC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(25);
      jj_consume_token(ESPACE);
      TYPE_VAR();
      jj_consume_token(ESPACE);
      DECL_METH();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void DECL_PROC() throws ParseException {
 /*@bgen(jjtree) DECL_PROC */
  SimpleNode jjtn000 = new SimpleNode(JJTDECL_PROC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(26);
      jj_consume_token(ESPACE);
      DECL_METH();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void DECL_METH() throws ParseException {
 /*@bgen(jjtree) DECL_METH */
  SimpleNode jjtn000 = new SimpleNode(JJTDECL_METH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NOM);
      jj_consume_token(27);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ESPACE:
      case NOM:
        DECL_PARAMS();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      jj_consume_token(28);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void DECL_PARAMS() throws ParseException {
 /*@bgen(jjtree) DECL_PARAMS */
  SimpleNode jjtn000 = new SimpleNode(JJTDECL_PARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ESPACE:
        jj_consume_token(ESPACE);
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      jj_consume_token(NOM);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ESPACE:
        jj_consume_token(ESPACE);
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      jj_consume_token(20);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ESPACE:
        jj_consume_token(ESPACE);
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      TYPE_VAR();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ESPACE:
        jj_consume_token(ESPACE);
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 29:
        jj_consume_token(29);
        DECL_PARAMS();
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void APPEL_METH() throws ParseException {
 /*@bgen(jjtree) APPEL_METH */
  SimpleNode jjtn000 = new SimpleNode(JJTAPPEL_METH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NOM);
      PARAMS();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void PARAMS() throws ParseException {
 /*@bgen(jjtree) PARAMS */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(27);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOMBRE_NN:
      case ZERO:
      case REEL:
      case ESPACE:
      case NOM:
      case TEXTE:
      case BOOLEEN:
      case 13:
      case 27:
      case 34:
        PARAM_VAL();
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      jj_consume_token(28);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void PARAM_VAL() throws ParseException {
 /*@bgen(jjtree) PARAM_VAL */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAM_VAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      CONTENU_VAR();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ESPACE:
        jj_consume_token(ESPACE);
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 29:
        jj_consume_token(29);
        PARAM_VAL();
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void APPEL() throws ParseException {
 /*@bgen(jjtree) APPEL */
  SimpleNode jjtn000 = new SimpleNode(JJTAPPEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_2(2)) {
        APPEL_METH();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOM:
          NOM_VAR();
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// Expressions arithmÃ©tiques
  static final public void EXPRESSION_UNAIRE() throws ParseException {
                            /*@bgen(jjtree) EXPRESSION_UNAIRE */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION_UNAIRE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
        jj_consume_token(27);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ESPACE:
          jj_consume_token(ESPACE);
          break;
        default:
          jj_la1[28] = jj_gen;
          ;
        }
        CALCUL();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ESPACE:
          jj_consume_token(ESPACE);
          break;
        default:
          jj_la1[29] = jj_gen;
          ;
        }
        jj_consume_token(28);
        break;
      case NOM:
        APPEL();
        break;
      case NOMBRE_NN:
      case ZERO:
      case 13:
        ENTIER();
        break;
      case REEL:
        jj_consume_token(REEL);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void CALCUL() throws ParseException {
                 /*@bgen(jjtree) CALCUL */
  SimpleNode jjtn000 = new SimpleNode(JJTCALCUL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MULTIPLICATION();
      label_2:
      while (true) {
        if (jj_2_3(2)) {
          ;
        } else {
          break label_2;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ESPACE:
          jj_consume_token(ESPACE);
          break;
        default:
          jj_la1[31] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 30:
          jj_consume_token(30);
          break;
        case 13:
          jj_consume_token(13);
          break;
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ESPACE:
          jj_consume_token(ESPACE);
          break;
        default:
          jj_la1[33] = jj_gen;
          ;
        }
        MULTIPLICATION();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void MULTIPLICATION() throws ParseException {
                         /*@bgen(jjtree) MULTIPLICATION */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      EXPRESSION_UNAIRE();
      label_3:
      while (true) {
        if (jj_2_4(2)) {
          ;
        } else {
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ESPACE:
          jj_consume_token(ESPACE);
          break;
        default:
          jj_la1[34] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 31:
          jj_consume_token(31);
          break;
        case 32:
          jj_consume_token(32);
          break;
        case 33:
          jj_consume_token(33);
          break;
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ESPACE:
          jj_consume_token(ESPACE);
          break;
        default:
          jj_la1[36] = jj_gen;
          ;
        }
        EXPRESSION_UNAIRE();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// Expressions boolÃ©ennes
  static final public void EXPRESSION_UNAIRE_BOOL() throws ParseException {
                                 /*@bgen(jjtree) EXPRESSION_UNAIRE_BOOL */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION_UNAIRE_BOOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 34:
        jj_consume_token(34);
        jj_consume_token(ESPACE);
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      if (jj_2_5(3)) {
        jj_consume_token(27);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ESPACE:
          jj_consume_token(ESPACE);
          break;
        default:
          jj_la1[38] = jj_gen;
          ;
        }
        CALCUL_BOOLEEN();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ESPACE:
          jj_consume_token(ESPACE);
          break;
        default:
          jj_la1[39] = jj_gen;
          ;
        }
        jj_consume_token(28);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEEN:
          jj_consume_token(BOOLEEN);
          break;
        default:
          jj_la1[40] = jj_gen;
          if (jj_2_6(3)) {
            APPEL();
          } else if (jj_2_7(2)) {
            COMP_ARITH();
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void CALCUL_BOOLEEN() throws ParseException {
 /*@bgen(jjtree) CALCUL_BOOLEEN */
  SimpleNode jjtn000 = new SimpleNode(JJTCALCUL_BOOLEEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      EXPRESSION_ET();
      label_4:
      while (true) {
        if (jj_2_8(2)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(ESPACE);
        jj_consume_token(35);
        jj_consume_token(ESPACE);
        EXPRESSION_ET();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void EXPRESSION_ET() throws ParseException {
 /*@bgen(jjtree) EXPRESSION_ET */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION_ET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      COMPARAISON();
      label_5:
      while (true) {
        if (jj_2_9(2)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(ESPACE);
        jj_consume_token(36);
        jj_consume_token(ESPACE);
        COMPARAISON();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// Comparaisons
  static final public void COMPARAISON() throws ParseException {
 /*@bgen(jjtree) COMPARAISON */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPARAISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      COMP_LOGIQUE();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void COMP_ARITH() throws ParseException {
 /*@bgen(jjtree) COMP_ARITH */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMP_ARITH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      EXPRESSION_UNAIRE();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ESPACE:
        jj_consume_token(ESPACE);
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 47:
      case 48:
      case 49:
      case 50:
        OPERATEUR_RELATIF();
        break;
      case 45:
      case 46:
        OPERATEUR_EGAL();
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ESPACE:
        jj_consume_token(ESPACE);
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
      }
      EXPRESSION_UNAIRE();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void COMP_LOGIQUE() throws ParseException {
 /*@bgen(jjtree) COMP_LOGIQUE */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMP_LOGIQUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_11(2)) {
        EXPRESSION_UNAIRE_BOOL();
        label_6:
        while (true) {
          if (jj_2_10(2)) {
            ;
          } else {
            break label_6;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ESPACE:
            jj_consume_token(ESPACE);
            break;
          default:
            jj_la1[44] = jj_gen;
            ;
          }
          OPERATEUR_EGAL();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ESPACE:
            jj_consume_token(ESPACE);
            break;
          default:
            jj_la1[45] = jj_gen;
            ;
          }
          EXPRESSION_UNAIRE_BOOL();
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOM:
        case TEXTE:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TEXTE:
            jj_consume_token(TEXTE);
            break;
          case NOM:
            APPEL();
            break;
          default:
            jj_la1[46] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ESPACE:
            jj_consume_token(ESPACE);
            break;
          default:
            jj_la1[47] = jj_gen;
            ;
          }
          OPERATEUR_EGAL();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ESPACE:
            jj_consume_token(ESPACE);
            break;
          default:
            jj_la1[48] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TEXTE:
            jj_consume_token(TEXTE);
            break;
          case NOM:
            APPEL();
            break;
          default:
            jj_la1[49] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// Ligne de code gÃ©nÃ©rique
  static final public void CODE() throws ParseException {
 /*@bgen(jjtree) CODE */
  SimpleNode jjtn000 = new SimpleNode(JJTCODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CR:
        jj_consume_token(CR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOM:
        case CR:
        case 37:
        case 40:
        case 43:
          CODE();
          break;
        default:
          jj_la1[51] = jj_gen;
          ;
        }
        break;
      case NOM:
      case 37:
      case 40:
      case 43:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 37:
          SI();
          break;
        case 40:
        case 43:
          BOUCLE();
          break;
        default:
          jj_la1[52] = jj_gen;
          if (jj_2_12(5)) {
            INST_VAR();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case NOM:
              APPEL();
              break;
            default:
              jj_la1[53] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
        jj_consume_token(CR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOM:
        case CR:
        case 37:
        case 40:
        case 43:
          CODE();
          break;
        default:
          jj_la1[54] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// Condition
  static final public void SI() throws ParseException {
 /*@bgen(jjtree) SI */
  SimpleNode jjtn000 = new SimpleNode(JJTSI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(37);
      jj_consume_token(ESPACE);
      CALCUL_BOOLEEN();
      jj_consume_token(CR);
      CODE();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        jj_consume_token(38);
        jj_consume_token(CR);
        CODE();
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
      jj_consume_token(39);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// Boucles
  static final public void BOUCLE() throws ParseException {
 /*@bgen(jjtree) BOUCLE */
  SimpleNode jjtn000 = new SimpleNode(JJTBOUCLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 40:
        POUR();
        break;
      case 43:
        TANTQUE();
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void POUR() throws ParseException {
 /*@bgen(jjtree) POUR */
  SimpleNode jjtn000 = new SimpleNode(JJTPOUR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(40);
      jj_consume_token(ESPACE);
      INST_VAR();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ESPACE:
        jj_consume_token(ESPACE);
        break;
      default:
        jj_la1[58] = jj_gen;
        ;
      }
      jj_consume_token(41);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ESPACE:
        jj_consume_token(ESPACE);
        break;
      default:
        jj_la1[59] = jj_gen;
        ;
      }
      CALCUL_BOOLEEN();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ESPACE:
        jj_consume_token(ESPACE);
        break;
      default:
        jj_la1[60] = jj_gen;
        ;
      }
      jj_consume_token(41);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ESPACE:
        jj_consume_token(ESPACE);
        break;
      default:
        jj_la1[61] = jj_gen;
        ;
      }
      INST_VAR();
      jj_consume_token(CR);
      CODE();
      jj_consume_token(42);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void TANTQUE() throws ParseException {
 /*@bgen(jjtree) TANTQUE */
  SimpleNode jjtn000 = new SimpleNode(JJTTANTQUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(43);
      jj_consume_token(ESPACE);
      CALCUL_BOOLEEN();
      jj_consume_token(CR);
      CODE();
      jj_consume_token(44);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// OpÃ©rateurs
  static final public void OPERATEUR_EGAL() throws ParseException {
 /*@bgen(jjtree) OPERATEUR_EGAL */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERATEUR_EGAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 45:
        jj_consume_token(45);
        break;
      case 46:
        jj_consume_token(46);
        break;
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void OPERATEUR_RELATIF() throws ParseException {
 /*@bgen(jjtree) OPERATEUR_RELATIF */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERATEUR_RELATIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 47:
        jj_consume_token(47);
        break;
      case 48:
        jj_consume_token(48);
        break;
      case 49:
        jj_consume_token(49);
        break;
      case 50:
        jj_consume_token(50);
        break;
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
  }

// Les gros blocs
  static final public void BLOC_VAR() throws ParseException {
 /*@bgen(jjtree) BLOC_VAR */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOC_VAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(51);
      jj_consume_token(CR);
      CORPS_VAR();
      jj_consume_token(52);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void BLOC_METH() throws ParseException {
 /*@bgen(jjtree) BLOC_METH */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOC_METH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(53);
      jj_consume_token(CR);
      CORPS_METH();
      jj_consume_token(54);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MAIN() throws ParseException {
 /*@bgen(jjtree) MAIN */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(55);
      jj_consume_token(CR);
      CODE();
      jj_consume_token(56);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ALGORITHME() throws ParseException {
 /*@bgen(jjtree) ALGORITHME */
  SimpleNode jjtn000 = new SimpleNode(JJTALGORITHME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(57);
      jj_consume_token(ESPACE);
      jj_consume_token(NOM);
      label_7:
      while (true) {
        jj_consume_token(CR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CR:
          ;
          break;
        default:
          jj_la1[64] = jj_gen;
          break label_7;
        }
      }
      BLOC_VAR();
      label_8:
      while (true) {
        jj_consume_token(CR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CR:
          ;
          break;
        default:
          jj_la1[65] = jj_gen;
          break label_8;
        }
      }
      BLOC_METH();
      label_9:
      while (true) {
        jj_consume_token(CR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CR:
          ;
          break;
        default:
          jj_la1[66] = jj_gen;
          break label_9;
        }
      }
      MAIN();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CR:
          ;
          break;
        default:
          jj_la1[67] = jj_gen;
          break label_10;
        }
        jj_consume_token(CR);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(29)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_3R_14()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_13()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(27)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    if (jj_scan_token(28)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_scan_token(6)) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_30()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(27)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) jj_scanpos = xsp;
    if (jj_scan_token(28)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(NOM)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_29()) return true;
    if (jj_scan_token(ASSIGNATION)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(NOM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(18)) return true;
    if (jj_scan_token(NOMBRE_NN)) return true;
    if (jj_scan_token(19)) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) return true;
    }
    return false;
  }

  static private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) jj_scanpos = xsp;
    if (jj_scan_token(NOMBRE_NN)) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_scan_token(5)) return true;
    }
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(ESPACE)) return true;
    if (jj_scan_token(36)) return true;
    if (jj_scan_token(ESPACE)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_14()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(ESPACE)) return true;
    if (jj_scan_token(35)) return true;
    if (jj_scan_token(ESPACE)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(27)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    if (jj_scan_token(28)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_31()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_3R_20()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(34)) return true;
    if (jj_scan_token(ESPACE)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public Grammar2TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  /** Whether we are looking ahead. */
  static private boolean jj_lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[68];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000,0x2030,0x201200,0x200200,0x201200,0x201200,0x3c000,0x40000,0x80,0x80,0x80,0x8002670,0x6001000,0x1200,0x1000,0x6000000,0x6001000,0x6001000,0x280,0x80,0x80,0x80,0x80,0x20000000,0x8002ef0,0x80,0x20000000,0x200,0x80,0x80,0x8002270,0x80,0x40002000,0x80,0x80,0x80000000,0x80,0x0,0x80,0x80,0x800,0x80,0x0,0x80,0x80,0x80,0x600,0x80,0x80,0x600,0x600,0x1200,0x0,0x200,0x1200,0x1200,0x0,0x0,0x80,0x80,0x80,0x80,0x0,0x0,0x1000,0x1000,0x1000,0x1000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x920,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x4,0x0,0x0,0x0,0x0,0x7e000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x920,0x920,0x0,0x920,0x920,0x40,0x900,0x0,0x0,0x0,0x0,0x6000,0x78000,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[12];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Grammar2(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Grammar2(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Grammar2TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 68; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 68; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Grammar2(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Grammar2TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 68; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 68; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Grammar2(Grammar2TokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 68; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(Grammar2TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 68; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[58];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 68; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 58; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 12; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
