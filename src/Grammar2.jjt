PARSER_BEGIN(Grammar2)
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
/**
 * An Arithmetic Grammar2.
 */
public class Grammar2 {

  /** Main entry point. */
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    //Grammar2 t = new Grammar2(System.in);
    Grammar2 t = null;
    try {
      t = new Grammar2(new FileInputStream(new File("NOMBREMYSTERE.txt")));
    } catch (FileNotFoundException e) {
      e.printStackTrace();
    }
    try {
      SimpleNode n = t.Start();
      n.dump("");
    } catch (Exception e) {
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(Grammar2)

SKIP : {
"\t"
}

TOKEN : {
    <#MAJUSCULE : (["A"-"Z"])>
  | <#MINUSCULE : (["a"-"z"])>
  | <NOMBRE_NN: ((["0"-"9"])* (["1"-"9"]) (["0"-"9"])*)>
  | <ZERO : ("0")+>
  | <REEL : ("-")?(["0"-"9"])+(".")(["0"-"9"])+>
  | <ESPACE : (" ")+>
  | <ASSIGNATION : (<ESPACE>)? "<-" (<ESPACE>)?>
  | <NOM : <MINUSCULE> (<MAJUSCULE> | <MINUSCULE> | ["0"-"9"] | "_")*>
  | <TEXTE : "\"" (<MAJUSCULE> | <MINUSCULE> | ["0"-"9"] | "_" | " " | "!" | ",")* "\"">
  | <BOOLEEN : "VRAI" | "FAUX">
  | <CR : (<ESPACE>)? ("#" (<MAJUSCULE> | <MINUSCULE> | ["0"-"9"] | "_" | " " | "!")*)? "\r\n">
}

// Main
SimpleNode Start() : {}
{
  ALGORITHME()
  { return jjtThis; }
}


// Valeurs primitives
void ENTIER() : {}
{
  ( (["-"] <NOMBRE_NN>) | <ZERO>)
}


// Déclaration variables
void CORPS_VAR():
{}
{
  <CR> [CORPS_VAR()]
  | (DECL_VAR() | DECL_CONST()) <CR> [CORPS_VAR()]
}

void TYPE_VAR():
{}
{
    "ENTIER" | "REEL" | "TEXTE" | "BOOLEEN"
}

void TABLEAU(): {}
{
   "[" <NOMBRE_NN> "]"
}

void NOM_VAR():
{}
{
    <NOM> [TABLEAU()]
}

void DECL_VAR():
{}
{
    NOM_VAR() [<ESPACE>] ":" [<ESPACE>] TYPE_VAR()
}

void DECL_CONST():
{}
{
    "CONST" <ESPACE> DECL_VAR() <ASSIGNATION> CONTENU_VAR()
}

void CONTENU_VAR() : {}
{
    [<ESPACE>] (LOOKAHEAD(999999999) CALCUL_BOOLEEN() | CALCUL() | <TEXTE>) // LL(infinie)
}

void INST_VAR():
{}
{
   NOM_VAR() <ASSIGNATION> CONTENU_VAR()
}

// Méthodes
void CORPS_METH():
{}
{
    <CR> [CORPS_METH()]
    | (DECL_FONC() <CR> [CODE()] "Retourne" <ESPACE> CONTENU_VAR() (<CR>)+ "FinFonction"
      | DECL_PROC() <CR> CODE() "FinProcedure") <CR> [CORPS_METH()]
}

void DECL_FONC():
{}
{
    "Fonction" <ESPACE> TYPE_VAR() <ESPACE> DECL_METH()
}

void DECL_PROC():
{}
{
    "Procedure" <ESPACE> DECL_METH()
}

void DECL_METH():
{}
{
    <NOM> "(" [DECL_PARAMS()] ")"
}

void DECL_PARAMS():
{}
{
  [<ESPACE>] <NOM> [<ESPACE>] ":" [<ESPACE>] TYPE_VAR() [<ESPACE>] ["," DECL_PARAMS()]
}

void APPEL_METH():
{}
{
    <NOM> PARAMS()
}

void PARAMS():
{}
{
   "(" [PARAM_VAL()] ")"
}

void PARAM_VAL():
{}
{
  CONTENU_VAR() [<ESPACE>] ["," PARAM_VAL()]
}

void APPEL():
{}
{
  LOOKAHEAD(2) APPEL_METH() | NOM_VAR()
}

// Expressions arithmétiques
void EXPRESSION_UNAIRE() : {}
{
  "(" [<ESPACE>] CALCUL() [<ESPACE>] ")" | APPEL() | ENTIER() | <REEL>
}

void CALCUL() : {}
{
    MULTIPLICATION() (LOOKAHEAD(2) [<ESPACE>] ("+" | "-") [<ESPACE>] MULTIPLICATION() )*
}

void MULTIPLICATION() : {}
{
    EXPRESSION_UNAIRE() (LOOKAHEAD(2) [<ESPACE>] ( "*" | "/" | "%") [<ESPACE>] EXPRESSION_UNAIRE() )*
}

// Expressions booléennes
void EXPRESSION_UNAIRE_BOOL() : {}
{
    ["NON" <ESPACE>] ( LOOKAHEAD(3) "(" [<ESPACE>] CALCUL_BOOLEEN() [<ESPACE>] ")" | <BOOLEEN> | LOOKAHEAD(3) APPEL() | LOOKAHEAD(2) COMP_ARITH()) // Conflict variable/appel calcul_booleen et comp_arith
}

void CALCUL_BOOLEEN():
{}
{
    EXPRESSION_ET() (LOOKAHEAD(2) <ESPACE> "OU" <ESPACE> EXPRESSION_ET())*
}

void EXPRESSION_ET():
{}
{
    COMPARAISON() (LOOKAHEAD(2) <ESPACE> "ET" <ESPACE> COMPARAISON())*
}

// Comparaisons
void COMPARAISON():
{}
{
  COMP_LOGIQUE()
}

void COMP_ARITH():
{}
{
  EXPRESSION_UNAIRE() [<ESPACE>] (OPERATEUR_RELATIF() | OPERATEUR_EGAL()) [<ESPACE>] EXPRESSION_UNAIRE()
}

void COMP_LOGIQUE():
{}
{
  LOOKAHEAD(2)
  EXPRESSION_UNAIRE_BOOL() (LOOKAHEAD(2) [<ESPACE>] OPERATEUR_EGAL() [<ESPACE>] EXPRESSION_UNAIRE_BOOL())*
  | (<TEXTE> | APPEL()) [<ESPACE>] OPERATEUR_EGAL() [<ESPACE>] (<TEXTE> | APPEL())
}

// Ligne de code générique
void CODE():
{}
{
  <CR> [CODE()]
  | (SI() | BOUCLE() | LOOKAHEAD(5) INST_VAR() | APPEL()) <CR> [CODE()] // LOOKAHEAD(5) -> <NOM> + '[' + <NOMBRE_NN> + ']' + epsilon ou '<-'
}

// Condition
void SI():
{}
{
  "Si" <ESPACE> CALCUL_BOOLEEN() <CR> CODE() ["Sinon" <CR> CODE()] "FinSi"
}

// Boucles
void BOUCLE():
{}
{
  POUR() | TANTQUE()
}

void POUR():
{}
{
  "Pour" <ESPACE> INST_VAR() [<ESPACE>] ";" [<ESPACE>] CALCUL_BOOLEEN() [<ESPACE>] ";" [<ESPACE>] INST_VAR() <CR> CODE() "FinPour"
}

void TANTQUE():
{}
{
  "TantQue" <ESPACE> CALCUL_BOOLEEN() <CR> CODE() "FinTantQue"
}

// Opérateurs
void OPERATEUR_EGAL():
{}
{
    "==" | "!=="
}

void OPERATEUR_RELATIF():
{}
{
     "<" | ">" | "<=" | ">="
}

// Les gros blocs
void BLOC_VAR():
{}
{
  "Var" <CR> CORPS_VAR() "FinVar"
}

void BLOC_METH():
{}
{
  "Meth" <CR> CORPS_METH() "FinMeth"
}

void MAIN():
{}
{
    "Debut" <CR> CODE() "Fin"
}

void ALGORITHME():
{}
{
  "Algo" <ESPACE> <NOM> (<CR>)+ BLOC_VAR() (<CR>)+ BLOC_METH() (<CR>)+ MAIN() (<CR>)*
}