/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. .\Grammar2.jj */
/*@egen*/PARSER_BEGIN(Grammar2)

/**
 * An Arithmetic Grammar2.
 */
public class Grammar2/*@bgen(jjtree)*/implements Grammar2TreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTGrammar2State jjtree = new JJTGrammar2State();

/*@egen*/

  /** Main entry point. */
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    Grammar2 t = new Grammar2(System.in);
    try {
      SimpleNode n = t.Start();
      n.dump("");
    } catch (Exception e) {
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(Grammar2)

SKIP : {
"\t"
|"\r"
}

TOKEN : {
    <MAJUSCULE : (["A"-"Z"])>
  | <MINUSCULE : (["a"-"z"])>
  | <NOMBRE_NN: ((["0"-"9"]){0,63} (["1"-"9"]) (["0"-"9"]){0,63})>
  | <ZERO : ("0")+>
  | <REEL : (["0"-"9"]){1,63}(".")(["0"-"9"]){1,63}>
  | <ASSIGNATION : "<-">
}

// Main
SimpleNode Start() : {/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  INST_VAR() ";"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

// Valeurs primitives
void ENTIER() : {/*@bgen(jjtree) ENTIER */
  SimpleNode jjtn000 = new SimpleNode(JJTENTIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ENTIER */
  try {
/*@egen*/
  (<NOMBRE_NN> | <ZERO>)/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void TEXTE() : {/*@bgen(jjtree) TEXTE */
  SimpleNode jjtn000 = new SimpleNode(JJTTEXTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TEXTE */
    try {
/*@egen*/
    "\"" TEXTE_EP() "\""/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void TEXTE_EP ():{/*@bgen(jjtree) TEXTE_EP */
  SimpleNode jjtn000 = new SimpleNode(JJTTEXTE_EP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TEXTE_EP */
    try {
/*@egen*/
    [(<MAJUSCULE> | <MINUSCULE> | <ZERO> | <NOMBRE_NN> | "_") TEXTE_EP()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void BOOLEEN():{/*@bgen(jjtree) BOOLEEN */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLEEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BOOLEEN */
    try {
/*@egen*/
    "VRAI" | "FAUX"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// D\u00c3\u00a9claration variables
void TYPE_VAR():
{/*@bgen(jjtree) TYPE_VAR */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE_VAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TYPE_VAR */
    try {
/*@egen*/
    "ENTIER" | "REEL" | "TEXTE" | "BOOLEEN"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void TABLEAU(): {/*@bgen(jjtree) TABLEAU */
  SimpleNode jjtn000 = new SimpleNode(JJTTABLEAU);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TABLEAU */
   try {
/*@egen*/
   [ "[" <NOMBRE_NN> "]" ]/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void NOM():
{/*@bgen(jjtree) NOM */
  SimpleNode jjtn000 = new SimpleNode(JJTNOM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NOM */
    try {
/*@egen*/
    <MINUSCULE> NOM_EP()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NOM_EP():
{/*@bgen(jjtree) NOM_EP */
  SimpleNode jjtn000 = new SimpleNode(JJTNOM_EP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NOM_EP */
    try {
/*@egen*/
    [(<MAJUSCULE> | <MINUSCULE> | <ZERO> | <NOMBRE_NN> | "_") NOM_EP()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NOM_VAR():
{/*@bgen(jjtree) NOM_VAR */
  SimpleNode jjtn000 = new SimpleNode(JJTNOM_VAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NOM_VAR */
    try {
/*@egen*/
    NOM() TABLEAU()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DECL_VAR():
{/*@bgen(jjtree) DECL_VAR */
  SimpleNode jjtn000 = new SimpleNode(JJTDECL_VAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DECL_VAR */
    try {
/*@egen*/
    NOM_VAR() ":" TYPE_VAR()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void CONTENU_VAR() : {/*@bgen(jjtree) CONTENU_VAR */
  SimpleNode jjtn000 = new SimpleNode(JJTCONTENU_VAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CONTENU_VAR */
   try {
/*@egen*/
   CALCUL() | TEXTE()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void INST_VAR():
{/*@bgen(jjtree) INST_VAR */
  SimpleNode jjtn000 = new SimpleNode(JJTINST_VAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) INST_VAR */
  try {
/*@egen*/
  NOM() <ASSIGNATION> CONTENU_VAR()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

// Expressions arithm\u00c3\u00a9tiques
void CALCUL() : {/*@bgen(jjtree) CALCUL */
  SimpleNode jjtn000 = new SimpleNode(JJTCALCUL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CALCUL */
    try {
/*@egen*/
    SOMME()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SOMME() : {/*@bgen(jjtree) SOMME */
  SimpleNode jjtn000 = new SimpleNode(JJTSOMME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SOMME */
    try {
/*@egen*/
    PRODUIT() ( ("+" | "-" | " OU ") PRODUIT() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void PRODUIT() : {/*@bgen(jjtree) PRODUIT */
  SimpleNode jjtn000 = new SimpleNode(JJTPRODUIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PRODUIT */
  try {
/*@egen*/
  EXPRESSION_UNAIRE() ( ( "*" | "/" | "%" | " ET ") EXPRESSION_UNAIRE() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void EXPRESSION_UNAIRE() : {/*@bgen(jjtree) EXPRESSION_UNAIRE */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION_UNAIRE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EXPRESSION_UNAIRE */
     try {
/*@egen*/
     ( ( ["NON "] ( "(" CALCUL() ")" | BOOLEEN() | NOM() ) ) | ENTIER() | <REEL> )/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}


// Ligne de code g\u00c3\u00a9n\u00c3\u00a9rique


// Condition


// Op\u00c3\u00a9rateurs
void OPERATEUR_ARITH():
{/*@bgen(jjtree) OPERATEUR_ARITH */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERATEUR_ARITH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OPERATEUR_ARITH */
    try {
/*@egen*/
    "+" | "*" | "-" | "/"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void OPERATEUR_LOGIQUE():
{/*@bgen(jjtree) OPERATEUR_LOGIQUE */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERATEUR_LOGIQUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OPERATEUR_LOGIQUE */
    try {
/*@egen*/
    "ET" | "OU" | "NON"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void OPERATEUR_EGAL():
{/*@bgen(jjtree) OPERATEUR_EGAL */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERATEUR_EGAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OPERATEUR_EGAL */
    try {
/*@egen*/
    "==" | "!=="/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void OPERATEUR_RELATIF():
{/*@bgen(jjtree) OPERATEUR_RELATIF */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERATEUR_RELATIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OPERATEUR_RELATIF */
     try {
/*@egen*/
     "<" | ">" | "<=" | ">="/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

